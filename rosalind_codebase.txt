import pandas as pd
import re
import numpy

# scope: load input
def load_input_file(fileName, mode):
  lines_with_new_line = []
  input_data = []

  if mode == "as a list":
    with open(fileName,'r') as reader:
      lines_with_new_line = reader.readlines();
      input_data = [line.rstrip('\n') for line in lines_with_new_line]
      return(input_data)

  if mode == "as a string":
    with open(fileName, 'r') as reader:
      data = reader.read().replace('\n','')
      return(data)

### scope: create a list of fasta strings from a single string containing multiple of them
### expected input: a string
def rosalind_fasta(data,character,fastaLength): 
  fasta_strings = {}
  chars_index = [i for i, letter in enumerate(data) if letter == character]
  
  for pos_a, pos_b in zip(chars_index, chars_index[1:]):
     fasta_strings[data[pos_a+1:pos_a+fastaLength]] = data[pos_a+fastaLength:pos_b]  
  
  last_chars_index = chars_index[len(fasta_strings)]
  fasta_strings[data[last_chars_index+1:last_chars_index+fastaLength]] = data[last_chars_index+fastaLength:]

  return(fasta_strings)


### scope: find GC content of a DNA string
### expected input: a DNA string
def calculate_GC_content(dna_string):
  return(100*(dna_string.count('C')+dna_string.count('G'))/len(dna_string))

### scope: find DNA string with highest GC content from a dictionary of DNA strings
### a dictionary with DNA strings
def find_max_GC_content(dna_strings):
  gc_contents = {}

  for i in dna_strings:
    gc_contents[i] = calculate_GC_content(dna_strings[i])

  max_key = max(gc_contents, key = gc_contents.get)
  return(max_key, gc_contents[max_key])

###
def load_rna_codon(): # load and preprocess codons dataset

  df = pd.read_csv("rna_codon.csv")
  codonsDict = df.set_index('codon').to_dict() 

###
def translateRNAtoProtein(rna_string):
  protein = ''

  for i in range(0,len(rna_string),3):
    codonReviewed = rna_string[i:i+3]
    if codonReviewed in('UAA','UAG','UGA'):
      break
    else:
      protein = protein + codonsDict['amino'][codonReviewed]

  return(protein)

### scope: return DNA profile matrixes and consensus string
### expected input: file with first line the dna string and the second the motif
def find_motif(input): 
  dna_string = input[0]
  motif = input[1]

  motif_matches = re.finditer('(?='+ motif +')',dna_string)
  motif_positions = [match.start()+1 for match in motif_matches]
  return(motif_positions)

### expected input: a dictionary of fasta_strings
def create_consensus_matrix(input_dict):

  profile_length = len(list(input_dict.values())[0])
  profile = [[0 for y in range(profile_length+1)] for x in range(4)]
  consensus_string = ''
  
  for member in input_dict:
    for count, digit in enumerate(input_dict[member]):

      if digit == 'A':
        profile[0][count] += 1
      if digit == 'C':
        profile[1][count] += 1
      if digit == 'G':
        profile[2][count] += 1
      if digit == 'T':
        profile[3][count] += 1

  for i in range(profile_length+1):
    if profile[0][i] == max(profile[0][i],profile[1][i], profile[2][i], profile[3][i]):
      consensus_string += 'A'
    if profile[1][i] == max(profile[0][i],profile[1][i], profile[2][i], profile[3][i]):
      consensus_string += 'C'
    if profile[2][i] == max(profile[0][i],profile[1][i], profile[2][i], profile[3][i]):
      consensus_string += 'G'
    if profile[3][i] == max(profile[0][i],profile[1][i], profile[2][i], profile[3][i]):
      consensus_string += 'T'

  return(consensus_string,profile)

# call
input_dataset = load_input_file("rosalind.txt","as a string")
fasta_strings = rosalind_fasta(input_dataset,'>',fastaLength = 14)
print(create_consensus_matrix(fasta_strings)) 
