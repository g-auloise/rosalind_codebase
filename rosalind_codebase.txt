# scope: load input
def load_input_file(fileName, mode):
  lines_with_new_line = []
  input_data = []

  if mode == "as a list":
    with open(fileName,'r') as reader:
      lines_with_new_line = reader.readlines();
      input_data = [line.rstrip('\n') for line in lines_with_new_line]
      return(input_data)

  if mode == "as a string":
    with open(fileName, 'r') as reader:
      data = reader.read().replace('\n','')
      return(data)

# scope: create a list of fasta strings from a single string containing multiple of them
# expected input: a string
def rosalind_fasta(data,character): 
  fasta_strings = {}
  chars_index = [i for i, letter in enumerate(data) if letter == character]

  for pos_a, pos_b in zip(chars_index, chars_index[1:]):
    print(chars_index[1:])

    fasta_strings[data[pos_a:pos_a+14]] = data[pos_a+15:pos_b]  
  return(fasta_strings)

def load_rna_codon(): # load and preprocess codons dataset

  df = pd.read_csv("rna_codon.csv")
  codonsDict = df.set_index('codon').to_dict() 

def translateRNAtoProtein(rna_string):
  protein = ''

  for i in range(0,len(rna_string),3):
    codonReviewed = rna_string[i:i+3]
    if codonReviewed in('UAA','UAG','UGA'):
      break
    else:
      protein = protein + codonsDict['amino'][codonReviewed]

  return(protein)

#expected input: file with first line the dna string and the second the motif
def find_motif(input): 
  dna_string = input[0]
  motif = input[1]

  motif_matches = re.finditer('(?='+ motif +')',dna_string)
  motif_positions = [match.start()+1 for match in motif_matches]
  return(motif_positions)

# call
input_dataset = load_input_file("rosalind.txt","as a string")

print(rosalind_fasta(input_dataset,'>'))
